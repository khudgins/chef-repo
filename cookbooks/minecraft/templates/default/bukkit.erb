#!/bin/bash
#
# bukkit  This shell script manages a minecraft/bukkit install
#
# chkconfig: 2345 95 95
# description: Modified bukkit startup script for the minecraft chef recipe \
#              Yoinked from Piffey, at piffey.com

# The following comes from attributes:
 
backupdir=<%= node[:minecraft][:backupdir] %>
bukkitdir=<%= node[:minecraft][:bukkitdir] %>
bukkitfilename=<%= node[:minecraft][:bukkitfilename] %>
bukkitupdate=<%= node[:minecraft][:bukkitupdate] %>
 
backupmsg="You's a big fine server, won't ya back that thing up. World file who ya playin wit, back dat thing up."
 
dateformat=$(date '+%Y%m%dh%Hm%M')
 
# Make sure you change this to the name of your world folder! Add additional worlds by separating them with a white space. If you only have one world, change this to have only one value like "world" or "creative".
declare -a worlds=(<%= node[:minecraft][:worlds] %>)
numworlds=${#worlds[@]}
 
# Set these for the amount of RAM you want to allocate. Good practice is to have the numbers match.
# This is the Java heap max and initial size.
 
javaparams="-Xmx<%= node[:minecraft][:javaheapmax] %> -Xms<%= node[:minecraft][:javaheapinit] %>"
 
# You can find this location with "whereis java". Make sure this points to the binary.
 
javaloc=<%= node[:minecraft][:javaloc] %>
 
# This currently points to the "preferred" release for bukkit which is kind of like a stable version.
# Change this value if you want to use the snapshot release.
bukkiturl=<%= node[:minecraft][:bukkiturl] %>
 
startbukkit()
{
    if [ "$(screen -ls | grep bukkit)" == "" ] ; then
        cd $bukkitdir
        screen -S bukkit -dmS $javaloc $javaparams -jar $bukkitdir$bukkitfilename
        echo "Starting bukkit server."
    else
        echo "Bukkit is already running."
        exit 0
    fi
}
 
stopbukkit()
{
    if [ "$(screen -ls | grep bukkit)" == "" ] ; then
        echo "Bukkit is not running."
        exit 0
    else
        screen -S bukkit -p 0 -X stuff "stop$(echo -ne '\r')"
        sleep 5
    fi
}
 
updatebukkit()
{
    if [ "$(screen -ls | grep bukkit)" == "" ] ; then
        sleep 0
    else
        screen -S bukkit -p 0 -X stuff "say Going down for an update in 60 seconds.$(echo -ne '\r')"
        sleep 55
        screen -S bukkit -p 0 -X stuff "say Going down for an update in 5 seconds.$(echo -ne '\r')"
        sleep 5
        stopbukkit        
    fi
 
    wget -O $bukkitdir$bukkitupdate $bukkiturl
    sleep 5
    mv $bukkitdir$bukkitupdate $bukkitdir$bukkitfilename
    sleep 5
}
 
backupbukkit()
{
    echo "Starting multiworld backup..."
    if [ "$(screen -ls | grep bukkit)" == "" ] ; then
        sleep 0
    else
        screen -S bukkit -p 0 -X stuff "say '$backupmsg' $(echo -ne '\r')"
        screen -S bukkit -p 0 -X stuff "save-all$(echo -ne '\r')"
        sleep 5
        screen -S bukkit -p 0 -X stuff "save-off$(echo -ne '\r')"
    fi
    if [ -d $backupdir ] ; then
        sleep 0
    else
        mkdir -p $backupdir
    fi
    for ((i=0;i<$numworlds;i++)); do
        cp -R $bukkitdir${worlds[$i]} $backupdir$dateformat
        echo "Saving '${worlds[$i]}' to '$backupdir$dateformat'"
    done
 
    if [ "$(screen -ls | grep bukkit)" == "" ] ; then
        sleep 0
    else
        sleep 5
        screen -S bukkit -p 0 -X stuff "save-on$(echo -ne '\r')"
    fi
    echo "Backup complete."
}
 
case $1 in
    start)
        startbukkit
        ;;
    stop)
        stopbukkit
        ;;
    restart)
        stopbukkit
        sleep 5
        startbukkit
        ;;
    update)
        updatebukkit
        ;;
    backup)
        backupbukkit
        ;;
    friendlystop)
        screen -S bukkit -p 0 -X stuff "say Going down in 5 minutes.$(echo -ne '\r')"
        sleep 240
        screen -S bukkit -p 0 -X stuff "say Going down in 60 seconds.$(echo -ne '\r')"
        sleep 55
        screen -S bukkit -p 0 -X stuff "say Going down in 5 seconds.$(echo -ne '\r')"
        sleep 5
        stopbukkit
        ;;
    *)
        echo "Usage: $0 {start|stop|restart|update|backup|friendlystop}"
esac
 
exit 0